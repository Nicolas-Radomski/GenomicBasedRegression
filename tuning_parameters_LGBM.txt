{
# when combined with any model or pipeline, minimizing the number of hyperparameter combinations helps reduce overall search time

# --- Feature selection (SelectKBest) ---
# used only to modify selected SKB behavior
'feature_selection__k': [25, 50], # number of top features to keep
'feature_selection__score_func': [mutual_info_regression], # score function (avoid chi2 in a context of regression and f_regression it captures only linear dependancies)

# --- Feature selection (SelectFromModel with lasso) ---
# used only to modify laSFM behavior
#'feature_selection__threshold': [-float('inf')], # disable thresholding to rely solely on max_features
#'feature_selection__max_features': [25, 50], # select exactly this number of top features
#'feature_selection__estimator__alpha': [0.01, 0.1, 1.0], # increase regularization to speed up convergence
#'feature_selection__estimator__max_iter': [500], # reduce iterations for faster training
#'feature_selection__estimator__tol': [1e-2], # relax convergence criteria to save time
#'feature_selection__estimator__fit_intercept': [True], # whether to estimate the intercept

# --- Feature selection (SelectFromModel with elasticnet) ---
# used only to modify enSFM behavior
#'feature_selection__threshold': [-float('inf')], # rank features by importance
#'feature_selection__max_features': [25, 50], # number of top features to keep
#'feature_selection__estimator__alpha': [0.1], # moderate regularization strength
#'feature_selection__estimator__l1_ratio': [0.5], # balanced L1/L2 penalty
#'feature_selection__estimator__max_iter': [300], # max iterations for convergence
#'feature_selection__estimator__tol': [1e-2], # relaxed convergence tolerance

# --- Feature selection (SelectFromModel with random forest) ---
# used only to modify rfSFM behavior
#'feature_selection__threshold': [-float('inf')], # rank all features by importance
#'feature_selection__max_features': [25, 50], # number of top features to keep
#'feature_selection__estimator__n_estimators': [100], # number of trees
#'feature_selection__estimator__max_depth': [10], # shallow trees for speed

# --- Feature selection (Boruta) ---
# used only to modify BO behavior
#'feature_selection__estimator__n_estimators': [5], # use a very small forest to reduce training time
#'feature_selection__estimator__max_depth': [2], # limit tree depth to make fitting faster
#'feature_selection__n_estimators': ['auto'], # use Boruta's default estimator parameter
#'feature_selection__max_iter': [5], # reduced number of iterations to speed up the selection process
#'feature_selection__perc': [90], # retain only the most important features (90th percentile)
#'feature_selection__two_step': [False], # disable the optional second refinement step to reduce computation

# --- Model tuning (LGBMRegressor) ---
# used only to modify LGBMRegressor behavior
# simplified tuning used together with SKB
'model__learning_rate': [0.05, 0.1], # skip 0.01 to speed up training; keep balance between accuracy and time
'model__n_estimators': [100, 300], # test low vs high to limit number of fits while covering range
'model__num_leaves': [31], # moderate complexity for leaves
'model__max_depth': [-1], # no depth limit
'model__subsample': [1.0], # use all data per tree (no subsampling)
'model__colsample_bytree': [1.0], # use all features per tree
'model__reg_alpha': [0.0, 0.1], # no and moderate L1 regularization
'model__reg_lambda': [0.0, 0.1], # no and moderate L2 regularization
'model__verbose': [-1], # suppress verbose output
'model__importance_type': ['gain'] # importance extraction

# --- Model tuning (LGBMRegressor) ---
# used only to modify LGBMRegressor behavior
#'model__learning_rate': [0.05, 0.1], # skip 0.01 to speed up training; keep balance between accuracy and time
#'model__n_estimators': [100, 300], # test low vs high to limit number of fits while covering range
#'model__num_leaves': [15, 63], # keep only extremes to test under/overfitting behavior
#'model__max_depth': [-1, 5], # no limit vs moderate depth to assess overfitting
#'model__subsample': [0.8, 1.0], # skip 0.6; 0.8 already adds randomness
#'model__colsample_bytree': [0.8, 1.0], # skip 0.6; keep more common and less extreme values
#'model__reg_alpha': [0.0, 0.1], # keep both to test effect of L1 regularization
#'model__reg_lambda': [0.0, 0.1], # keep both to test effect of L2 regularization
#'model__verbose': [-1], # avoids verbose from the non-sklearn library
#'model__importance_type': ['split', 'gain'], # importance extraction (default: 'split')
}
