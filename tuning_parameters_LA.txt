{
# when combined with any model or pipeline, minimizing the number of hyperparameter combinations helps reduce overall search time

# --- Feature selection (SelectKBest) ---
# used only to modify selected SKB behavior
'feature_selection__k': [25, 50], # number of top features to keep
'feature_selection__score_func': [mutual_info_regression], # score function (avoid chi2 in a context of regression and f_regression it captures only linear dependancies)

# --- Feature selection (SelectFromModel with lasso) ---
# used only to modify laSFM behavior
#'feature_selection__threshold': [-float('inf')], # disable thresholding to rely solely on max_features
#'feature_selection__max_features': [25, 50], # select exactly this number of top features
#'feature_selection__estimator__alpha': [0.01, 0.1, 1.0], # increase regularization to speed up convergence
#'feature_selection__estimator__max_iter': [500], # reduce iterations for faster training
#'feature_selection__estimator__tol': [1e-2], # relax convergence criteria to save time
#'feature_selection__estimator__fit_intercept': [True], # whether to estimate the intercept

# --- Feature selection (SelectFromModel with elasticnet) ---
# used only to modify enSFM behavior
#'feature_selection__threshold': [-float('inf')], # rank features by importance
#'feature_selection__max_features': [25, 50], # number of top features to keep
#'feature_selection__estimator__alpha': [0.1], # moderate regularization strength
#'feature_selection__estimator__l1_ratio': [0.5], # balanced L1/L2 penalty
#'feature_selection__estimator__max_iter': [300], # max iterations for convergence
#'feature_selection__estimator__tol': [1e-2], # relaxed convergence tolerance

# --- Feature selection (SelectFromModel with random forest) ---
# used only to modify rfSFM behavior
#'feature_selection__threshold': [-float('inf')], # rank all features by importance
#'feature_selection__max_features': [25, 50], # number of top features to keep
#'feature_selection__estimator__n_estimators': [100], # number of trees
#'feature_selection__estimator__max_depth': [10], # shallow trees for speed

# --- Feature selection (Boruta) ---
# used only to modify BO behavior
#'feature_selection__estimator__n_estimators': [5], # use a very small forest to reduce training time
#'feature_selection__estimator__max_depth': [2], # limit tree depth to make fitting faster
#'feature_selection__n_estimators': ['auto'], # use Boruta's default estimator parameter
#'feature_selection__max_iter': [5], # reduced number of iterations to speed up the selection process
#'feature_selection__perc': [90], # retain only the most important features (90th percentile)
#'feature_selection__two_step': [False], # disable the optional second refinement step to reduce computation

# --- Model tuning (Lasso) ---
# used only to modify Lasso behavior
# simplified tuning used together with SKB
'model__alpha': [0.0001, 0.001, 0.01, 0.1], # low and moderate regularization
'model__max_iter': [5000, 10000], # iterations for optimization; higher helps with convergence
'model__tol': [1e-5], # reasonable stopping tolerance
'model__selection': ['cyclic', 'random'], # deterministic and stochastic coordinate update
'model__fit_intercept': [True], # include bias term
'model__warm_start': [False], # no warm start

# --- Model tuning (Lasso) ---
# used only to modify Lasso behavior
#'model__alpha': [0.0001, 0.001, 0.01, 0.1, 1.0, 10.0], # regularization strength; smaller = more flexibility
#'model__max_iter': [1000, 5000, 10000], # iterations for optimization; higher helps with convergence
#'model__tol': [1e-4, 1e-5, 1e-6, 1e-7], # stopping tolerance; lower = stricter fit
#'model__selection': ['cyclic', 'random'], # coordinate update order; cyclic = deterministic, random = stochastic
#'model__fit_intercept': [True, False], # whether to include bias term; False may be better if data is centered
#'model__warm_start': [False], # always start from scratch; avoids path dependency in CV
}
