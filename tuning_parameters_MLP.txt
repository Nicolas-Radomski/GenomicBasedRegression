{
# when combined with any model or pipeline, minimizing the number of hyperparameter combinations helps reduce overall search time

# --- Feature selection (SelectKBest) ---
# used only to modify selected SKB behavior
'feature_selection__k': [25, 50], # number of top features to keep
'feature_selection__score_func': [mutual_info_regression], # score function (avoid chi2 in a context of regression and f_regression it captures only linear dependancies)

# --- Feature selection (SelectFromModel with lasso) ---
# used only to modify laSFM behavior
#'feature_selection__threshold': [-float('inf')], # disable thresholding to rely solely on max_features
#'feature_selection__max_features': [25, 50], # select exactly this number of top features
#'feature_selection__estimator__alpha': [0.01, 0.1, 1.0], # increase regularization to speed up convergence
#'feature_selection__estimator__max_iter': [500], # reduce iterations for faster training
#'feature_selection__estimator__tol': [1e-2], # relax convergence criteria to save time
#'feature_selection__estimator__fit_intercept': [True], # whether to estimate the intercept

# --- Feature selection (SelectFromModel with elasticnet) ---
# used only to modify enSFM behavior
#'feature_selection__threshold': [-float('inf')], # rank features by importance
#'feature_selection__max_features': [25, 50], # number of top features to keep
#'feature_selection__estimator__alpha': [0.1], # moderate regularization strength
#'feature_selection__estimator__l1_ratio': [0.5], # balanced L1/L2 penalty
#'feature_selection__estimator__max_iter': [300], # max iterations for convergence
#'feature_selection__estimator__tol': [1e-2], # relaxed convergence tolerance

# --- Feature selection (SelectFromModel with random forest) ---
# used only to modify rfSFM behavior
#'feature_selection__threshold': [-float('inf')], # rank all features by importance
#'feature_selection__max_features': [25, 50], # number of top features to keep
#'feature_selection__estimator__n_estimators': [100], # number of trees
#'feature_selection__estimator__max_depth': [10], # shallow trees for speed

# --- Feature selection (Boruta) ---
# used only to modify BO behavior
#'feature_selection__estimator__n_estimators': [5], # use a very small forest to reduce training time
#'feature_selection__estimator__max_depth': [2], # limit tree depth to make fitting faster
#'feature_selection__n_estimators': ['auto'], # use Boruta's default estimator parameter
#'feature_selection__max_iter': [5], # reduced number of iterations to speed up the selection process
#'feature_selection__perc': [90], # retain only the most important features (90th percentile)
#'feature_selection__two_step': [False], # disable the optional second refinement step to reduce computation

# --- Model tuning (MLPRegressor) ---
# used only to modify MLPRegressor behavior
# simplified tuning used together with SKB
'model__hidden_layer_sizes': [(100,)],   # simple but effective architecture
'model__activation': ['relu'],           # fast, standard activation
'model__alpha': [0.0001],                # minimal regularization
'model__learning_rate': ['adaptive'],   # automatic learning rate adjustment
'model__learning_rate_init': [0.001],   # stable initial learning rate
'model__max_iter': [1000],               # sufficient iterations for convergence
'model__early_stopping': [True],         # prevents overfitting and speeds training

# --- Model tuning (MLPRegressor) ---
# used only to modify MLPRegressor behavior
#'model__hidden_layer_sizes': [(50,), (100,)], # simple architectures to limit runtime
#'model__activation': ['relu', 'tanh'], # fast vs smooth nonlinear activation
#'model__alpha': [0.0001], # minimal regularization for simplicity
#'model__learning_rate': ['constant', 'adaptive'], # fixed vs auto-adjusted learning rate
#'model__learning_rate_init': [0.001, 0.01], # stable to faster initial learning rates
#'model__max_iter': [1000], # ensures convergence
#'model__early_stopping': [True], # avoids overfitting and speeds up tuning
}
