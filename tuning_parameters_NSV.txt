{
# when combined with any model or pipeline, minimizing the number of hyperparameter combinations helps reduce overall search time

# --- Feature selection (SelectKBest) ---
# used only to modify selected SKB behavior
'feature_selection__k': [25, 50], # number of top features to keep
'feature_selection__score_func': [mutual_info_regression], # score function (avoid chi2 in a context of regression and f_regression it captures only linear dependancies)

# --- Feature selection (SelectFromModel with lasso) ---
# used only to modify laSFM behavior
#'feature_selection__threshold': [-float('inf')], # disable thresholding to rely solely on max_features
#'feature_selection__max_features': [25, 50], # select exactly this number of top features
#'feature_selection__estimator__alpha': [0.01, 0.1, 1.0], # increase regularization to speed up convergence
#'feature_selection__estimator__max_iter': [500], # reduce iterations for faster training
#'feature_selection__estimator__tol': [1e-2], # relax convergence criteria to save time
#'feature_selection__estimator__fit_intercept': [True], # whether to estimate the intercept

# --- Feature selection (SelectFromModel with elasticnet) ---
# used only to modify enSFM behavior
#'feature_selection__threshold': [-float('inf')], # rank features by importance
#'feature_selection__max_features': [25, 50], # number of top features to keep
#'feature_selection__estimator__alpha': [0.1], # moderate regularization strength
#'feature_selection__estimator__l1_ratio': [0.5], # balanced L1/L2 penalty
#'feature_selection__estimator__max_iter': [300], # max iterations for convergence
#'feature_selection__estimator__tol': [1e-2], # relaxed convergence tolerance

# --- Feature selection (SelectFromModel with random forest) ---
# used only to modify rfSFM behavior
#'feature_selection__threshold': [-float('inf')], # rank all features by importance
#'feature_selection__max_features': [25, 50], # number of top features to keep
#'feature_selection__estimator__n_estimators': [100], # number of trees
#'feature_selection__estimator__max_depth': [10], # shallow trees for speed

# --- Feature selection (Boruta) ---
# used only to modify BO behavior
#'feature_selection__estimator__n_estimators': [5], # use a very small forest to reduce training time
#'feature_selection__estimator__max_depth': [2], # limit tree depth to make fitting faster
#'feature_selection__n_estimators': ['auto'], # use Boruta's default estimator parameter
#'feature_selection__max_iter': [5], # reduced number of iterations to speed up the selection process
#'feature_selection__perc': [90], # retain only the most important features (90th percentile)
#'feature_selection__two_step': [False], # disable the optional second refinement step to reduce computation

# --- Model tuning (NuSVR) ---
# used only to modify NuSVR behavior
# simplified tuning used together with SKB
'model__C': [1, 10], # moderate regularization values
'model__nu': [0.25, 0.5], # balanced margin/support vector trade-offs
'model__kernel': ['rbf', 'linear'], # most common kernels
'model__gamma': ['scale', 0.1], # default and a flexible alternative
'model__degree': [3], # typical polynomial degree if poly kernel used
'model__coef0': [0.0], # fixed bias term
'model__shrinking': [True], # enable shrinking for speed
'model__tol': [1e-3, 1e-4], # balance speed and convergence
'model__max_iter': [2000], # iteration cap

# --- Model tuning (NuSVR) ---
# used only to modify NuSVR behavior
#'model__C': [0.1, 1, 10, 100], # broad range from light to strong regularization
#'model__nu': [0.1, 0.25, 0.5, 0.75, 0.9], # compromise between margin and support vectors
#'model__kernel': ['linear', 'rbf', 'poly'], # covers all kernel types
#'model__gamma': ['scale', 0.01, 0.1], # default and a flexible alternative
#'model__degree': [2], # fixed polynomial degree
#'model__coef0': [0.0], # fixed bias term in 'poly' kernel
#'model__shrinking': [True], # keep enabled to reduce training time
#'model__tol': [1e-3, 1e-4], # balance speed and convergence
#'model__max_iter': [2000], # fixed iteration cap
}
